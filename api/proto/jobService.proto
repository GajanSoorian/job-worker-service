syntax = "proto3";

package apis;

// JobRunner defines the gRPC APIs supported by the library
service JobRunner {
  // Start a job. Input message contains command and arguments for the command.
  // Returns a uuid for the Job.
  rpc Start(JobStart) returns (JobId) {}

  // Stop a job that was triggered. Input is the uuid of the job.
  rpc Stop(JobId) returns (JobStopResponse) {}

  // Query the status of a job. Input is uuid of the job.
  // Returns the job status.
  rpc Query(JobId) returns (JobStatus) {}

  // StreamOutput allow us to stream the output of job. specified by job ID.
  rpc StreamOutput(JobId) returns (stream JobStream) {}
}

// JobStart contains the linux job that has to be executed.
message JobStart {
  // cmd is the linux job passed in by the user.
  string cmd = 1;
  // args is the argument for cmd.
  repeated string args = 2;
  // jobResourceUsage is an optional way to limit the resources the job can
  // utilize.
  JobResourceUsage level = 3;
}

// JobId is the response for a sucessful JobStart.
message JobId {
  // id is the uuid for job that was sucessfully triggered.
  string id = 1;
}

// jobResourceProfile is used to set the resouces that will be allocated for
// the job.
enum JobResourceUsage {
  // RESTRICTED denotes throttled CPU, Memory and I/O usage limit.
  RESTRICTED = 0;
  // STANDARD denotes default CPU, Memory and I/O usage limit.
  STANDARD = 1;
  // ELEVATED denotes elevated CPU, Memory and I/O usage limit.
  ELEVATED = 2;
}

// JobStopResponse is an empty message used by stop service.
message JobStopResponse {}

// JobStatus contains the current status of a job.
message JobStatus {
  JobId id = 1;
  JobState status = 2;
}

// JobState hold the possible states for a job.
enum JobState {
  // INPROGRESS - the job is currently running.
  INPROGRESS = 0;
  // COMPLETED - the job finshed execution sucessfully.
  COMPLETED = 1;
  // FAILED - the job exited with an error status.
  FAILED = 2;
  // STOPPED - the job was stopped before its completion.
  STOPPED = 3;
}

// JobStream allows streaming out of a job.
message JobStream {
  // output generated by the job.
  bytes output = 1;
}
